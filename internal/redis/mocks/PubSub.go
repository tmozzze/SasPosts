// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PubSub is an autogenerated mock type for the PubSub type
type PubSub struct {
	mock.Mock
}

// Publish provides a mock function with given fields: ctx, channel, message
func (_m *PubSub) Publish(ctx context.Context, channel string, message interface{}) error {
	ret := _m.Called(ctx, channel, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, channel, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, channel
func (_m *PubSub) Subscribe(ctx context.Context, channel string) (<-chan []byte, func()) {
	ret := _m.Called(ctx, channel)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan []byte
	var r1 func()
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan []byte, func())); ok {
		return rf(ctx, channel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan []byte); ok {
		r0 = rf(ctx, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) func()); ok {
		r1 = rf(ctx, channel)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	return r0, r1
}

// NewPubSub creates a new instance of PubSub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPubSub(t interface {
	mock.TestingT
	Cleanup(func())
}) *PubSub {
	mock := &PubSub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
