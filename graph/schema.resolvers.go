package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/tmozzze/SasPosts/graph/generated"
	"github.com/tmozzze/SasPosts/graph/model"
	"github.com/tmozzze/SasPosts/internal/domain"
)

// Children is the resolver for the children field.
func (r *commentResolver) Children(ctx context.Context, obj *domain.Comment, limit *int, offset *int) ([]*domain.Comment, error) {
	lim := 10
	if limit != nil {
		lim = *limit
	}
	ofs := 0
	if offset != nil {
		ofs = *offset
	}
	return r.CommentRepo.GetChildren(ctx, obj.ID, lim, ofs)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPostInput) (*domain.Post, error) {
	post := domain.NewPost(
		input.Title,
		input.Content,
		input.Author,
		input.AllowComments,
	)

	err := r.PostRepo.Create(ctx, post)
	if err != nil {
		return nil, err
	}

	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewCommentInput) (*domain.Comment, error) {
	allowed, err := r.PostRepo.CheckAllowedComments(ctx, input.PostID)
	if err != nil {
		return nil, err
	}
	if !allowed {
		return nil, domain.ErrCommentsOff
	}

	comment, err := domain.NewComment(
		input.PostID,
		input.Author,
		input.ParentID,
		input.Content,
	)

	if err != nil {
		return nil, err
	}

	if err := r.CommentRepo.Create(ctx, comment); err != nil {
		return nil, err
	}

	channelName := fmt.Sprintf("comments:%s", comment.PostID)
	r.PubSub.Publish(ctx, channelName, comment)

	return comment, nil
}

// ToggleComments is the resolver for the toggleComments field.
func (r *mutationResolver) ToggleComments(ctx context.Context, postID string, allow bool) (*domain.Post, error) {
	if err := r.PostRepo.ToggleComments(ctx, postID, allow); err != nil {
		return nil, err
	}
	return r.PostRepo.GetByID(ctx, postID)
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *domain.Post, limit *int, offset *int) ([]*domain.Comment, error) {
	lim := 10
	if limit != nil {
		lim = *limit
	}
	ofs := 0
	if offset != nil {
		ofs = *offset
	}
	return r.CommentRepo.GetByPost(ctx, obj.ID, lim, ofs)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*domain.Post, error) {
	return r.PostRepo.GetAll(ctx)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*domain.Post, error) {
	return r.PostRepo.GetByID(ctx, id)
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *domain.Comment, error) {
	_, err := r.PostRepo.GetByID(ctx, postID)
	if err != nil {
		return nil, fmt.Errorf("failed to get post: %w", err)
	}

	channelName := fmt.Sprintf("comments:%s", postID)
	msgChan, closeFunc := r.PubSub.Subscribe(ctx, channelName)

	gqlChan := make(chan *domain.Comment)

	go func() {
		defer closeFunc()
		defer close(gqlChan)

		for payload := range msgChan {
			var comment domain.Comment
			if err := json.Unmarshal(payload, &comment); err == nil {
				select {
				case gqlChan <- &comment:
				case <-ctx.Done():
					return
				}
			}
		}
	}()

	return gqlChan, nil
}

// Comment returns generated.CommentResolver implementation.
func (r *Resolver) Comment() generated.CommentResolver { return &commentResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Post returns generated.PostResolver implementation.
func (r *Resolver) Post() generated.PostResolver { return &postResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
